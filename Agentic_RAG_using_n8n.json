{
  "name": "Agentic RAG for Portfolio",
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Enable the pgvector extension to work with embedding vectors\ncreate extension vector;\n\n-- Create a table to store your documents\ncreate table documents (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create a function to search for documents\ncreate function match_documents (\n  query_embedding vector(1536),\n  match_count int default null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where metadata @> filter\n  order by documents.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        300,
        -160
      ],
      "id": "91aceb49-1c59-444d-84a2-1b99bc41aec8",
      "name": "Create Documents Table and Match Function",
      "credentials": {
        "postgres": {
          "id": "XBYGz3UUCOREfjoO",
          "name": "Agentic RAG Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_metadata (\n    id TEXT PRIMARY KEY,\n    title TEXT,\n    url TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    schema TEXT\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        540,
        -160
      ],
      "id": "d58869cb-09f5-4634-8640-c116886f605a",
      "name": "Create Document Metadata Table",
      "credentials": {
        "postgres": {
          "id": "XBYGz3UUCOREfjoO",
          "name": "Agentic RAG Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_rows (\n    id SERIAL PRIMARY KEY,\n    dataset_id TEXT REFERENCES document_metadata(id),\n    row_data JSONB\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        780,
        -160
      ],
      "id": "a5e59486-890e-4944-80d8-df884b0fdcce",
      "name": "Create Document Rows Table (for Tabular Data)",
      "credentials": {
        "postgres": {
          "id": "XBYGz3UUCOREfjoO",
          "name": "Agentic RAG Database"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "15xYCPe3ch4-M-u9g3UgqnBeC3n0ex8eh",
          "mode": "list",
          "cachedResultName": "Documents for n8n",
          "cachedResultUrl": "https://drive.google.com/drive/folders/15xYCPe3ch4-M-u9g3UgqnBeC3n0ex8eh"
        },
        "event": "fileCreated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        0,
        220
      ],
      "id": "52b57fc6-247a-4e1a-b8ec-b2a37cb98d75",
      "name": "File Created",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "sdlBtNmflEpkBZk6",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "15xYCPe3ch4-M-u9g3UgqnBeC3n0ex8eh",
          "mode": "list",
          "cachedResultName": "Documents for n8n",
          "cachedResultUrl": "https://drive.google.com/drive/folders/15xYCPe3ch4-M-u9g3UgqnBeC3n0ex8eh"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        0,
        420
      ],
      "id": "882073e2-fdf4-4c13-8c7f-1a3a28fedcd8",
      "name": "File Updated",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "sdlBtNmflEpkBZk6",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        220,
        220
      ],
      "id": "daee4c9c-9af7-4638-8785-467d5b4e4bfd",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "documents",
        "filterType": "string",
        "filterString": "=metadata->>file_id=like.*{{ $json.file_id }}*"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        520,
        460
      ],
      "id": "951c00de-b703-4b3e-a1da-8015fdc65efd",
      "name": "Delete Old Doc in Documents Table",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "5DTEBhcOm4DgB3d6",
          "name": "Supabase account for Agentic RAG"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "document_rows",
        "filters": {
          "conditions": [
            {
              "keyName": "dataset_id",
              "condition": "eq",
              "keyValue": "={{ $('Set File ID').item.json.file_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        700,
        460
      ],
      "id": "63b9d9ee-8ffa-418a-815e-537c7bc9e995",
      "name": "Delete Old Data in document_rows Table",
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "5DTEBhcOm4DgB3d6",
          "name": "Supabase account for Agentic RAG"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "title": "={{ $('Set File ID').item.json.file_title }}",
            "url": "={{ $('Set File ID').item.json.file_url }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        880,
        460
      ],
      "id": "0758912e-3f37-4949-ad55-bdc85ca920f1",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "XBYGz3UUCOREfjoO",
          "name": "Agentic RAG Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1040,
        460
      ],
      "id": "e458f51e-1947-462d-b74c-5473643ca893",
      "name": "Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "sdlBtNmflEpkBZk6",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "ebebca81-0725-4d32-bd42-25e4c78c76f5"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6ddd8a4f-0cf3-4320-9022-07aea81fd487",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "EXCEL"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "10bc2404-de75-4443-b480-910736893876",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "text/csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CSV"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "12721042-4a17-417f-ac2a-9f5fceb0df14",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "GOOGLE DOCS"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1220,
        440
      ],
      "id": "a9e37a4d-9bc3-4b04-8011-98cd3e865c94",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1520,
        140
      ],
      "id": "713d1e4d-de38-41d7-a95c-0191d5c10144",
      "name": "Extract from PDF"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1520,
        340
      ],
      "id": "150b6003-2019-44a2-92cb-007afee2e50e",
      "name": "Extract from Excel"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1520,
        520
      ],
      "id": "fdfaa68a-f494-4348-9c2f-0b33166677a6",
      "name": "Extract from CSV"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        2420,
        500
      ],
      "id": "0169b95a-75fc-4048-94e4-4bc9a539e955",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "5DTEBhcOm4DgB3d6",
          "name": "Supabase account for Agentic RAG"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_rows",
          "mode": "list",
          "cachedResultName": "document_rows"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "dataset_id": "={{ $('Set File ID').item.json.file_id }}",
            "row_data": "={{ $json.toJsonString().replaceAll(/'/g, \"''\") }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_id",
              "displayName": "dataset_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_data",
              "displayName": "row_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1780,
        340
      ],
      "id": "b7d599f5-e27d-4bc0-b48d-57398f6d2284",
      "name": "Insert to document_rows Table (Tabular Data)",
      "credentials": {
        "postgres": {
          "id": "XBYGz3UUCOREfjoO",
          "name": "Agentic RAG Database"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1780,
        520
      ],
      "id": "e1c2d7c2-0a7f-4437-8bd0-02bfedf4ab5a",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "b2021352-89bb-4820-b96f-c0a756d71a17",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2020,
        440
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c0b82dd0-3a24-4fc4-adb9-a48887dbf1db",
              "name": "=schema",
              "value": "={{ $('Extract from Excel').isExecuted ? $('Extract from Excel').first().json.keys().toJsonString() : $('Extract from CSV').first().json.keys().toJsonString() }}",
              "type": "string"
            },
            {
              "id": "c13b002a-6bd6-414d-b89b-a65d1149d6c4",
              "name": "=data",
              "value": "={{ $json.concatenated_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2320,
        260
      ],
      "id": "1ec41204-8f88-4f4b-b7ff-5612f9a8508a",
      "name": "Setting Schema"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "schema": "={{ $json.schema }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2520,
        260
      ],
      "id": "d6761db4-6d37-473f-9219-6ad248f4999c",
      "name": "Update Schema for documents table",
      "credentials": {
        "postgres": {
          "id": "XBYGz3UUCOREfjoO",
          "name": "Agentic RAG Database"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        2280,
        780
      ],
      "id": "6e946da0-5d5e-4fcc-8dc0-7460c9ed7dc6",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "AbmkfdOQlblYL0w6",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data || $json.text || $json.concatenated_data }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=file_id",
                "value": "={{ $('Set File ID').first().json.file_id }}"
              },
              {
                "name": "file_title",
                "value": "={{ $('Set File ID').first().json.file_title }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        2460,
        740
      ],
      "id": "cb1796a8-91e6-4cca-91c5-239e6476262d",
      "name": "Default Data Loader"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2500,
        900
      ],
      "id": "953367ab-db38-49b2-b9a6-5d70975508ec",
      "name": "Character Text Splitter"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d70d8ac-5a09-4823-b243-66174c9cbe35",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "8750730b-6fcd-416a-8239-fdf112db425e",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "de7fcd87-2f23-43da-83ee-639d229887a9",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "2ae8337c-dcb6-4878-80e6-ecedc5c8229f",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        360,
        460
      ],
      "id": "ce51c8f3-c10b-4cce-b940-19a231c5ca34",
      "name": "Set File ID"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        1260,
        -440
      ],
      "id": "63ffce46-a844-44ce-9c61-934c05bcb2ad",
      "name": "Telegram Trigger",
      "webhookId": "c17e5aa8-684e-4254-ac3c-782b6584525a",
      "credentials": {
        "telegramApi": {
          "id": "jq9gglSCTRcRzcF7",
          "name": "My Agentic RAG"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6acfdae2-46f3-4018-85f4-68ebcb30d52b",
              "name": "chatInput",
              "value": "={{ $json.message.text }}",
              "type": "string"
            },
            {
              "id": "ea273ec5-1818-4394-9f9d-207613e2fb89",
              "name": "sessionId",
              "value": "={{ $json.message.chat.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1480,
        -440
      ],
      "id": "f18327f3-7770-409e-a897-593e0c3754cd",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1420,
        -200
      ],
      "id": "8a374974-1e60-460c-93ab-425e41528193",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "AbmkfdOQlblYL0w6",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1580,
        -200
      ],
      "id": "b075c34c-f61d-411d-8d74-9a91dc88b434",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "XBYGz3UUCOREfjoO",
          "name": "Agentic RAG Database"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1720,
        -200
      ],
      "id": "060602b7-9eaa-488c-9286-aa0cff5e5196",
      "name": "Select all of List Documents",
      "credentials": {
        "postgres": {
          "id": "XBYGz3UUCOREfjoO",
          "name": "Agentic RAG Database"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the text from the document.",
        "operation": "executeQuery",
        "query": "SELECT \n    string_agg(content, ' ') as document_text\nFROM documents\n  WHERE metadata->>'file_id' = $1\nGROUP BY metadata->>'file_id';",
        "options": {
          "queryReplacement": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query_Parameters', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1860,
        -200
      ],
      "id": "405a6370-61c1-4dda-a5a9-7760ec8ae3a2",
      "name": "Get File Content from documents Table",
      "credentials": {
        "postgres": {
          "id": "XBYGz3UUCOREfjoO",
          "name": "Agentic RAG Database"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Sure! Here's the revised version of the prompt with the added instruction:\n\nRun a SQL query – use this to query from the document_rows table once you know the file ID you are querying. dataset_id is the file_id and you are always using the row_data for filtering, which is a jsonb field that has all the keys from the file schema given in the document_metadata table.\n\n⚠️ Note: When writing your SQL query, carefully check the schema in the document_metadata table. Make sure the column names used in row_data match exactly (case-sensitive and spelling) with the schema stored in document_metadata. Otherwise, the query may fail or return incorrect results.\n\nExample query:\n\nSELECT AVG((row_data->>'revenue')::numeric)\nFROM document_rows\nWHERE dataset_id = '123';\n\nExample query 2:\n\nSELECT \n    row_data->>'category' as category,\n    SUM((row_data->>'sales')::numeric) as total_sales\nFROM dataset_rows\nWHERE dataset_id = '123'\nGROUP BY row_data->>'category';",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        2020,
        -200
      ],
      "id": "1403806d-ea05-44b0-baa6-52e2bcc28fa7",
      "name": "Get Document Rows",
      "credentials": {
        "postgres": {
          "id": "XBYGz3UUCOREfjoO",
          "name": "Agentic RAG Database"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to find information in the knowledgebase.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        2160,
        -220
      ],
      "id": "f2c5002b-d14a-4293-8076-4fb79f7c6325",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "5DTEBhcOm4DgB3d6",
          "name": "Supabase account for Agentic RAG"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        2160,
        -40
      ],
      "id": "e9cdaa79-32ec-4511-ac91-b4f5ba904aef",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "AbmkfdOQlblYL0w6",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2060,
        -440
      ],
      "id": "94c202ad-0c68-42f8-8f4b-72374062ec16",
      "name": "Telegram",
      "webhookId": "46c8b105-38e3-40c2-889f-250f3e6fb324",
      "credentials": {
        "telegramApi": {
          "id": "jq9gglSCTRcRzcF7",
          "name": "My Agentic RAG"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1520,
        740
      ],
      "id": "83442a34-a52c-4254-a23a-cca417019a06",
      "name": "Extract from Google Docs"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a personal assistant who helps answer questions from a corpus of documents. The documents are either text-based (Txt, Docs, extracted PDFs, etc.) or tabular data (CSVs or Excel documents).\n\nYou are given tools to perform RAG in the documents table, look up the documents available in your knowledge base in the document_metadata table, extract all the text from a given document, and query the tabular files with SQL in the document_rows table.\n\nAlways start by performing RAG unless the question requires a SQL query for tabular data (e.g., fetching a sum, finding a max, aggregations — anything a RAG lookup would be unreliable for). If RAG doesn't help, then look at the documents that are available to you, find a few that you think would contain the answer, and then analyze those.\n\n⚠️ For tabular data: always start by using the document_metadata table to find the corresponding dataset ID — this is stored in the id column (not dataset_id) — and examine the schema carefully. The column names you use in SQL must match exactly (case-sensitive and spelling) with the keys listed in the schema from document_metadata. Any mismatch can lead to incorrect or failed queries.\n\nIf you cannot find the answer within the given documents or context, politely respond with: \"Sorry, I couldn't find what you are looking for in any of the available documents.\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        1700,
        -440
      ],
      "id": "a6662b8a-f351-4819-bbcd-ec13a1263b63",
      "name": "Agentic RAG"
    }
  ],
  "pinData": {},
  "connections": {
    "File Created": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Updated": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Doc in Documents Table": {
      "main": [
        [
          {
            "node": "Delete Old Data in document_rows Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Data in document_rows Table": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Excel": {
      "main": [
        [
          {
            "node": "Insert to document_rows Table (Tabular Data)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Insert to document_rows Table (Tabular Data)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert to document_rows Table (Tabular Data)": {
      "main": [
        []
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          },
          {
            "node": "Setting Schema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setting Schema": {
      "main": [
        [
          {
            "node": "Update Schema for documents table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "Delete Old Doc in Documents Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Agentic RAG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Select all of List Documents": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Content from documents Table": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Document Rows": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Google Docs": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agentic RAG": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9f544e0b-0db7-4bb0-8335-69c0a088f1fc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1f679df01e7b48a7e705d738e81949fa963e9bde114f71c165ef28853d37dd6f"
  },
  "id": "REEoA3Q3nYKXJMuJ",
  "tags": []
}